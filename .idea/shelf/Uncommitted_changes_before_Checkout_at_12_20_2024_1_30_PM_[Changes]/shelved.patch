Index: Datawarehouse/src/main/java/Controller/LoadFileCSV.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Controller;\r\n\r\nimport DAO.DBProperties;\r\nimport DAO.JDBCUtil;\r\nimport Model.EmailService;\r\n\r\nimport java.sql.*;\r\nimport java.time.LocalDateTime;\r\n\r\npublic class LoadFileCSV {\r\n    private static final String DB_URL = DBProperties.host;\r\n    private static final String DB_USER = DBProperties.username;\r\n    private static final String DB_PASSWORD = DBProperties.password;\r\n    private EmailService emailService = new EmailService();\r\n\r\n    public static void main(String[] args) {\r\n        LoadFileCSV loader = new LoadFileCSV();\r\n        loader.executeLoadProcess();\r\n    }\r\n\r\n    public void executeLoadProcess() {\r\n        LocalDateTime currentTime = LocalDateTime.now();\r\n        String tableStaging = \"product_staging\";\r\n        int configId = getConfigId();  // Get the correct configId dynamically\r\n        String filePath = \"D:/DataWarehouse/DW_Thu5_Ca1_Nhom12_HK1_2024/Datawarehouse/phone_data.csv\";\r\n\r\n        if (configId == -1) {\r\n            System.out.println(\"Error: No valid config found.\");\r\n            return; // Exit if configId is not valid\r\n        }\r\n\r\n        try (Connection controlConnection = JDBCUtil.getConnection()) {\r\n            System.out.println(\"Checking if any process is running...\");\r\n\r\n            // Call stored procedure to check running process\r\n            try (CallableStatement cstmt = controlConnection.prepareCall(\"{CALL control.check_running_process(?)}\")) {\r\n                cstmt.setInt(1, configId);  // Passing configId dynamically\r\n                ResultSet rsRunningProcess = cstmt.executeQuery();\r\n                if (rsRunningProcess.next()) {\r\n                    int isProcessing = rsRunningProcess.getInt(\"is_processing\");\r\n                    String status = rsRunningProcess.getString(\"status\");\r\n                    if (isProcessing == 1 && !\"START_EXTRACT\".equals(status)) {\r\n                        insertLog(controlConnection, configId, null, \"Tiến trình đang chạy. Không thể tải dữ liệu.\",\r\n                                \"FAILURE_RUNNING_PROCESS\", currentTime);\r\n                        sendEmail(\"Tiến trình đang chạy\", \"Hiện tại có tiến trình khác đang chạy. Không thể tải dữ liệu.\",\r\n                                \"Tiến trình đang chạy\", null);\r\n                        System.out.println(\"Process is already running. Cannot proceed.\");\r\n                        return;\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Call stored procedure to insert config if table is empty\r\n            try (CallableStatement cstmt = controlConnection.prepareCall(\"{CALL control.insert_config()}\")) {\r\n                cstmt.execute();\r\n                System.out.println(\"Configuration data inserted.\");\r\n            }\r\n\r\n            System.out.println(\"Checking if table \" + tableStaging + \" exists...\");\r\n            // Check if table exists\r\n            try (CallableStatement cstmt = controlConnection.prepareCall(\"{CALL check_table_exists(?)}\")) {\r\n                cstmt.setString(1, tableStaging);\r\n                ResultSet rsTableCheck = cstmt.executeQuery();\r\n                if (rsTableCheck.next() && rsTableCheck.getInt(1) == 0) {\r\n                    // Call stored procedure to create table if not exists\r\n                    try (CallableStatement createTableStmt = controlConnection.prepareCall(\"{CALL staging.create_product_staging_table()}\")) {\r\n                        createTableStmt.execute();\r\n                    }\r\n                    System.out.println(\"Table \" + tableStaging + \" has been created.\");\r\n                } else {\r\n                    System.out.println(\"Table \" + tableStaging + \" already exists.\");\r\n                }\r\n            }\r\n\r\n            // Check if file exists\r\n            if (filePath == null || !new java.io.File(filePath).exists()) {\r\n                insertLog(controlConnection, configId, filePath, \"Đường dẫn tệp dữ liệu không hợp lệ hoặc tệp không tồn tại: \" + filePath,\r\n                        \"FAILURE_INVALID_FILE_PATH\", currentTime);\r\n                sendEmail(\"Lỗi đường dẫn tệp dữ liệu\", \"The system cannot find the file specified: \" + filePath,\r\n                        \"Lỗi đường dẫn tệp dữ liệu\", filePath);\r\n                System.out.println(\"File does not exist at path: \" + filePath);\r\n                return;\r\n            }\r\n\r\n            // Truncate data in staging table\r\n            try (CallableStatement cstmt = controlConnection.prepareCall(\"{CALL staging.truncate_staging_table(?)}\")) {\r\n                cstmt.setString(1, tableStaging);\r\n                cstmt.execute();\r\n                System.out.println(\"Old data in table \" + tableStaging + \" has been deleted.\");\r\n            }\r\n\r\n            // Log status and start extracting data\r\n            insertLog(controlConnection, configId, null, \"Bắt đầu quá trình extract dữ liệu vào bảng \" + tableStaging,\r\n                    \"START_EXTRACT\", currentTime);\r\n\r\n            // Run LOAD DATA SQL directly\r\n            String fieldsTerminated = \",\";  // Field separator for CSV file\r\n            String optionallyEnclosed = \"\\\"\";  // Enclosure for values (if any)\r\n            String linesTerminated = \"\\n\";  // Line separator\r\n            int ignoreRow = 1;  // Skip the header row\r\n\r\n            String loadSql = \"LOAD DATA INFILE '\" + filePath + \"' \" +\r\n                    \"INTO TABLE \" + tableStaging + \" \" +\r\n                    \"FIELDS TERMINATED BY '\" + fieldsTerminated + \"' \" +\r\n                    \"OPTIONALLY ENCLOSED BY '\" + optionallyEnclosed + \"' \" +\r\n                    \"LINES TERMINATED BY '\" + linesTerminated + \"' \" +\r\n                    \"IGNORE \" + ignoreRow + \" ROWS \" +\r\n                    \"(product_name, cpu, ram, storage_capacity, screen_size, price, battery_capacity, os, manufacturer)\";\r\n\r\n            // Execute the LOAD DATA command\r\n            try (Statement stmt = controlConnection.createStatement()) {\r\n                stmt.execute(loadSql);\r\n                System.out.println(\"Data successfully loaded into table \" + tableStaging);\r\n\r\n                // Log success\r\n                insertLog(controlConnection, configId, filePath, \"Load data vào bảng \" + tableStaging + \" thành công\",\r\n                        \"SUCCESS_LOAD_DATA\", currentTime);\r\n\r\n                sendEmail(\"Load data thành công\", \"Dữ liệu đã được tải thành công vào bảng \" + tableStaging,\r\n                        \"Load data thành công\", filePath);\r\n            }\r\n\r\n            // Update the processing status to finished\r\n            try (CallableStatement cstmt = controlConnection.prepareCall(\"{CALL control.update_processing_status(?, ?)}\")) {\r\n                cstmt.setInt(1, configId);  // Using integer for configId\r\n                cstmt.setInt(2, 0);  // Mark as finished\r\n                cstmt.execute();\r\n                System.out.println(\"Data load process finished. Status updated to 'finished'.\");\r\n            }\r\n\r\n        } catch (Exception e) {\r\n            try (Connection controlConnection = JDBCUtil.getConnection()) {\r\n                insertLog(controlConnection, configId, filePath, \"Error during data load process: \" + e.getMessage(),\r\n                        \"FAILURE\", currentTime);\r\n                sendEmail(\"Lỗi trong quá trình tải dữ liệu\", \"Có lỗi xảy ra trong quá trình tải dữ liệu: \" + e.getMessage(),\r\n                        \"Lỗi tải dữ liệu\", filePath);\r\n            } catch (SQLException sqlException) {\r\n                sqlException.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n\r\n    // Get the correct configId dynamically from the database\r\n    private int getConfigId() {\r\n        int configId = 0;\r\n        String query = \"SELECT id_config FROM control.config_table WHERE is_processing = 0 ORDER BY id_config DESC LIMIT 1\"; // Ensure we get the most recent valid config\r\n        try (Connection connection = JDBCUtil.getConnection();\r\n             Statement stmt = connection.createStatement();\r\n             ResultSet rs = stmt.executeQuery(query)) {\r\n\r\n            if (rs.next()) {\r\n                configId = rs.getInt(\"id_config\");\r\n            }\r\n        } catch (SQLException e) {\r\n            e.printStackTrace();\r\n        }\r\n        return configId;\r\n    }\r\n\r\n    private void insertLog(Connection conn, int configId, String filePath, String message, String status,\r\n                           LocalDateTime timestamp) throws SQLException {\r\n        try (CallableStatement cstmt = conn.prepareCall(\"{CALL control.insert_log(?, ?, ?, ?, ?)}\")) {\r\n            cstmt.setInt(1, configId);  // Use dynamic configId here\r\n            cstmt.setString(2, filePath);\r\n            cstmt.setString(3, message);\r\n            cstmt.setString(4, status);\r\n            cstmt.setTimestamp(5, Timestamp.valueOf(timestamp));\r\n            cstmt.execute();\r\n        }\r\n    }\r\n\r\n    private void sendEmail(String subject, String body, String title, String filePath) {\r\n        emailService.send(\"phamtrungtinpy363@gmail.com\", subject, body);\r\n        System.out.println(\"Email sent with subject: \" + subject);\r\n    }\r\n}\r\n
===================================================================
diff --git a/Datawarehouse/src/main/java/Controller/LoadFileCSV.java b/Datawarehouse/src/main/java/Controller/LoadFileCSV.java
--- a/Datawarehouse/src/main/java/Controller/LoadFileCSV.java	
+++ b/Datawarehouse/src/main/java/Controller/LoadFileCSV.java	
@@ -44,7 +44,6 @@
                                 "FAILURE_RUNNING_PROCESS", currentTime);
                         sendEmail("Tiến trình đang chạy", "Hiện tại có tiến trình khác đang chạy. Không thể tải dữ liệu.",
                                 "Tiến trình đang chạy", null);
-                        System.out.println("Process is already running. Cannot proceed.");
                         return;
                     }
                 }
